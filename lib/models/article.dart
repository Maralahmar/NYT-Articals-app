import 'dart:convert';
import 'package:json_annotation/json_annotation.dart';

part 'article.g.dart';  // This file is generated by json_serializable and contains the JSON serialization logic.

/// Parses JSON data to create an `Article` object.
Article articlesListFromJson(String str) => Article.fromJson(json.decode(str));

/// Converts an `Article` object to JSON data.
String articlesListToJson(Article data) => json.encode(data.toJson());

/// Represents an article with various attributes.
@JsonSerializable()
class Article {
  String? uri;  // Unique identifier for the article.
  String? url;  // URL to the article.
  int? id;  // Unique ID for the article.
  int? assetId;  // Asset ID associated with the article.
  String? source;  // Source of the article.
  DateTime? publishedDate;  // Date when the article was published.
  DateTime? updated;  // Date when the article was last updated.
  String? section;  // Section of the article (e.g., Technology, Sports).
  String? subsection;  // Subsection within the section.
  String? nytdsection;  // NYT-specific section identifier.
  String? adxKeywords;  // Keywords associated with the article.
  dynamic column;  // Column name, if applicable.
  String? byline;  // Author or byline of the article.
  String? type;  // Type of the article (e.g., Blog, Review).
  String? title;  // Title of the article.
  String? articlesListAbstract;  // Abstract or summary of the article.
  List<String>? desFacet;  // Descriptive facets or tags.
  List<String>? orgFacet;  // Organizational facets or tags.
  List<String>? perFacet;  // Personal facets or tags.
  List<dynamic>? geoFacet;  // Geographical facets or tags.
  List<Media>? media;  // List of media objects associated with the article.
  int? etaId;  // ETA ID, if applicable.

  Article({
    this.uri,
    this.url,
    this.id,
    this.assetId,
    this.source,
    this.publishedDate,
    this.updated,
    this.section,
    this.subsection,
    this.nytdsection,
    this.adxKeywords,
    this.column,
    this.byline,
    this.type,
    this.title,
    this.articlesListAbstract,
    this.desFacet,
    this.orgFacet,
    this.perFacet,
    this.geoFacet,
    this.media,
    this.etaId,
  });

  // Factory method to create an `Article` instance from JSON data.
  factory Article.fromJson(Map<String, dynamic> json) => Article(
    uri: json["uri"],
    url: json["url"],
    id: json["id"],
    assetId: json["asset_id"],
    source: json["source"],
    publishedDate: json["published_date"] == null
        ? null
        : DateTime.parse(json["published_date"]),
    updated:
    json["updated"] == null ? null : DateTime.parse(json["updated"]),
    section: json["section"],
    subsection: json["subsection"],
    nytdsection: json["nytdsection"],
    adxKeywords: json["adx_keywords"],
    column: json["column"],
    byline: json["byline"],
    type: json["type"],
    title: json["title"],
    articlesListAbstract: json["abstract"],
    desFacet: json["des_facet"] == null
        ? []
        : List<String>.from(json["des_facet"]!.map((x) => x)),
    orgFacet: json["org_facet"] == null
        ? []
        : List<String>.from(json["org_facet"]!.map((x) => x)),
    perFacet: json["per_facet"] == null
        ? []
        : List<String>.from(json["per_facet"]!.map((x) => x)),
    geoFacet: json["geo_facet"] == null
        ? []
        : List<dynamic>.from(json["geo_facet"]!.map((x) => x)),
    media: json["media"] == null
        ? []
        : List<Media>.from(json["media"]!.map((x) => Media.fromJson(x))),
    etaId: json["eta_id"],
  );

  // Converts the `Article` instance to JSON data.
  Map<String, dynamic> toJson() => {
    "uri": uri,
    "url": url,
    "id": id,
    "asset_id": assetId,
    "source": source,
    "published_date":
    "${publishedDate!.year.toString().padLeft(4, '0')}-${publishedDate!.month.toString().padLeft(2, '0')}-${publishedDate!.day.toString().padLeft(2, '0')}",
    "updated": updated?.toIso8601String(),
    "section": section,
    "subsection": subsection,
    "nytdsection": nytdsection,
    "adx_keywords": adxKeywords,
    "column": column,
    "byline": byline,
    "type": type,
    "title": title,
    "abstract": articlesListAbstract,
    "des_facet":
    desFacet == null ? [] : List<dynamic>.from(desFacet!.map((x) => x)),
    "org_facet":
    orgFacet == null ? [] : List<dynamic>.from(orgFacet!.map((x) => x)),
    "per_facet":
    perFacet == null ? [] : List<dynamic>.from(perFacet!.map((x) => x)),
    "geo_facet":
    geoFacet == null ? [] : List<dynamic>.from(geoFacet!.map((x) => x)),
    "media": media == null
        ? []
        : List<dynamic>.from(media!.map((x) => x.toJson())),
    "eta_id": etaId,
  };
}

/// Represents media associated with an article.
class Media {
  String? type;  // Type of media (e.g., image, video).
  String? subtype;  // Subtype of media.
  String? caption;  // Caption or description of media.
  String? copyright;  // Copyright information.
  int? approvedForSyndication;  // Flag indicating if the media is approved for syndication.
  List<MediaMetadatum>? mediaMetadata;  // List of metadata about the media.

  Media({
    this.type,
    this.subtype,
    this.caption,
    this.copyright,
    this.approvedForSyndication,
    this.mediaMetadata,
  });

  // Factory method to create a `Media` instance from JSON data.
  factory Media.fromJson(Map<String, dynamic> json) => Media(
    type: json["type"],
    subtype: json["subtype"],
    caption: json["caption"],
    copyright: json["copyright"],
    approvedForSyndication: json["approved_for_syndication"],
    mediaMetadata: json["media-metadata"] == null
        ? []
        : List<MediaMetadatum>.from(
        json["media-metadata"]!.map((x) => MediaMetadatum.fromJson(x))),
  );

  // Converts the `Media` instance to JSON data.
  Map<String, dynamic> toJson() => {
    "type": type,
    "subtype": subtype,
    "caption": caption,
    "copyright": copyright,
    "approved_for_syndication": approvedForSyndication,
    "media-metadata": mediaMetadata == null
        ? []
        : List<dynamic>.from(mediaMetadata!.map((x) => x.toJson())),
  };
}

/// Represents metadata about media.
class MediaMetadatum {
  String? url;  // URL of the media metadata.
  String? format;  // Format of the media (e.g., jpg, png).
  int? height;  // Height of the media.
  int? width;  // Width of the media.

  MediaMetadatum({
    this.url,
    this.format,
    this.height,
    this.width,
  });

  // Factory method to create a `MediaMetadatum` instance from JSON data.
  factory MediaMetadatum.fromJson(Map<String, dynamic> json) => MediaMetadatum(
    url: json["url"],
    format: json["format"],
    height: json["height"],
    width: json["width"],
  );

  // Converts the `MediaMetadatum` instance to JSON data.
  Map<String, dynamic> toJson() => {
    "url": url,
    "format": format,
    "height": height,
    "width": width,
  };
}
